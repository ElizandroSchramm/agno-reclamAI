"""
Sistema de Agentes para Renegocia√ß√£o de D√≠vidas
Vers√£o Nativa com AgentOS

Este arquivo configura os agentes usando AgentOS do Agno
que automaticamente cria os endpoints FastAPI.
"""

from agno.agent import Agent
from agno.os import AgentOS
from agno.models.openai import OpenAIChat
from agno.db.sqlite import SqliteDb
import os
from agno.guardrails import PromptInjectionGuardrail, OpenAIModerationGuardrail
from agno.team.team import Team
from dotenv import load_dotenv
from agno_knowledge import inicializar_agno_knowledge, sistema_knowledge
from guardrails.spam_length import SpamAndLengthGuardrail
from guardrails.toxicity_hf import ToxicityHFGuardrail

# Carregar vari√°veis de ambiente
load_dotenv()

# Inicializar sistemas
inicializar_agno_knowledge()
# inicializar_base_historico()

# Configurar banco de dados SQLite para mem√≥ria e hist√≥rico
db = SqliteDb(db_file="agno_memory.db")

def criar_agente_triagem():
    """
    Cria o agente de triagem usando a sintaxe nativa do Agno
    """
    instrucoes = """
    ## Papel
    Voc√™ √© o **Agente de Triagem** do ReclamAI, respons√°vel por coletar informa√ß√µes sobre d√≠vidas do usu√°rio.

    ## Objetivo
    Construir e atualizar um registro √∫nico do caso do usu√°rio, combinando o hist√≥rico da conversa (mem√≥ria do time) com as novas mensagens recebidas.

    ## Instru√ß√µes de fluxo
    1. Sempre leia as informa√ß√µes j√° conhecidas na mem√≥ria da sess√£o antes de responder.
    2. Atualize apenas os campos que o usu√°rio completou nesta nova mensagem.
    3. **Nunca reinicie** o processo ou repita perguntas que j√° foram respondidas corretamente.
    4. Se ainda houver campos faltantes, pergunte **somente** os que continuam vazios.
    5. Quando todos os campos obrigat√≥rios estiverem preenchidos, retorne `status:"Pronto"` e o briefing completo para o especialista.

    ## Campos obrigat√≥rios
    1) N√∫mero de d√≠vidas  
    2) Empresas/credores envolvidos  
    3) Valores aproximados das d√≠vidas  
    4) Tempo de inadimpl√™ncia  
    5) Tentativas anteriores de negocia√ß√£o (sim/n√£o)  
    6) Prefer√™ncia sobre negativa√ß√£o do nome

    ## Como agir
    - Incentive o usu√°rio a contar tudo de uma vez, mas se vier parcial, mantenha o progresso.
    - Use linguagem natural e emp√°tica, mas responda sempre em **JSON minificado** (sem markdown).
    - **Fus√£o de dados:** combine o que o usu√°rio acabou de dizer com o que j√° est√° salvo na mem√≥ria (`case_data` existente).  
    Exemplo: se `credores` j√° cont√©m `["Nubank"]`, n√£o sobrescreva com vazio.
    - Se a mensagem atual n√£o traz novos dados, apenas repita a pergunta dos `faltantes`.

    ## Sa√≠da (JSON minificado)
    {"briefing":{"bullets":["..."]},
    "case_data":{"num_dividas":null,"credores":[],"valores_aprox":[],"inadimplencia":{"meses":null,"desde_texto":""},"negociacao_previa":"desconhecido","aceita_negativacao":"desconhecido"},
    "validation":{"has_num_dividas":false,"has_credores":false,"has_valores":false,"has_inadimplencia":false,"has_negociacao_previa":false,"has_preferencia_negativacao":false,"all_required_present":false},
    "faltantes":["..."],
    "status":"NaoPronto",
    "ui":{"perguntao":"...","followups":["..."]}}

    ## Conven√ß√µes
    - `negociacao_previa`: "sim" | "nao" | "desconhecido"
    - `aceita_negativacao`: "sim" | "nao" | "indiferente" | "desconhecido"

    ## Importante
    - Use a mem√≥ria para lembrar o que o usu√°rio j√° disse nesta sess√£o.
    - Pergunte s√≥ o que falta.
    - Nunca apague dados v√°lidos j√° coletados.
    """
    
    
    agente = Agent(
        name="Triagem",
        instructions=instrucoes,
        db=db,  # üéØ Banco de dados 
        add_history_to_context=True,
        num_history_runs=10,
        enable_user_memories=True,  # üéØ Mem√≥ria autom√°tica habilitada
        add_datetime_to_context=True,
        markdown=True,
    )
    
    return agente

def criar_agente_especialista():
    instrucoes = """
    ## Papel
    Voc√™ √© um especialista em renegocia√ß√£o de d√≠vidas com acesso a uma base de conhecimento espec√≠fica.

    ## Objetivo
    Atuar como **especialista em renegocia√ß√£o de d√≠vidas**, usando o briefing estruturado pelo Agente de Triagem.
    Sua miss√£o √©:
    - Consultar a base RAG para entender como o consumidor pode atuar para renegocia√ß√£o**.  
    - Identificar quais direitos e estrat√©gias cabem ao perfil do usu√°rio.  
    - Gerar um **playbook personalizado** em 4 se√ß√µes.  

    ---

    ## Estrutura de Sa√≠da Esperada
    ### 1. Resumo do Caso
    - [bullet 1]  
    - [bullet 2]  
    - [bullet 3]  

    ### 2. Rotas de A√ß√£o
    - Contato direto com credor.  
    - Feir√µes ou canais oficiais (Consumidor.gov.br, Procon).  
    - Avaliar descontos x parcelamento.  
    - Impacto no score/nome limpo.  

    ### 3. Mensagem Padr√£o
    Prezados(as),

    Venho solicitar formalmente a renegocia√ß√£o da d√≠vida referente a [tipo de contrato/d√≠vida] junto √† [nome da empresa].  
    Meu objetivo √© regularizar a situa√ß√£o de forma justa e vi√°vel, por isso pe√ßo:  

    - Apresenta√ß√£o detalhada do saldo devedor atualizado (valor principal, juros, encargos e multas).  
    - Proposta de desconto para quita√ß√£o ou plano de parcelamento acess√≠vel.  
    - Registro do acordo de forma clara e documentada.  

    Estou aberto(a) a dialogar e espero uma resposta em at√© 10 dias.  

    ### 4. Pr√≥ximos Passos
    - Enviar a mensagem ao canal oficial da empresa (SAC/app).
    - Guardar comprovante do envio.
    - Caso n√£o haja resposta em at√© 10 dias √∫teis ‚Üí registrar em **Consumidor.gov.br**.
    - Se mesmo assim n√£o resolver ‚Üí procurar **Procon local**.

    ---

    ## Guardrails
    - N√£o dar aconselhamento jur√≠dico ‚Üí apenas informa√ß√µes p√∫blicas.  
    - Linguagem simples, sem juridiqu√™s.  
    - Sempre recomendar guardar documentos e registros.  

    
    Sua fun√ß√£o √©:
    1. Analisar as informa√ß√µes coletadas na triagem
    2. Buscar informa√ß√µes relevantes na base de conhecimento automaticamente
    3. Fornecer orienta√ß√µes espec√≠ficas sobre como proceder
    4. Sugerir estrat√©gias de negocia√ß√£o com o banco
    5. Explicar os passos que o usu√°rio deve seguir
    
    IMPORTANTE: Voc√™ tem acesso autom√°tico √† base de conhecimento sobre renegocia√ß√£o de d√≠vidas.
    O sistema ir√° automaticamente buscar informa√ß√µes relevantes para suas respostas.
    
    Seja detalhado e pr√°tico nas suas orienta√ß√µes.
    Sempre explique o "porqu√™" de cada recomenda√ß√£o.
    """
    
    agente = Agent(
        name="Especialista",
        instructions=instrucoes,
        db=db,  # üéØ Banco de dados para mem√≥ria e hist√≥rico
        knowledge=sistema_knowledge.knowledge,  # üéØ Agno Knowledge nativo!
        search_knowledge=True,  # üéØ Busca autom√°tica!
        knowledge_filters={"type": "faq", "category": "renegociacao"},  # üéØ Filtros!
        add_history_to_context=True,
        num_history_runs=10,  # üéØ √öltimas 10 intera√ß√µes
        add_datetime_to_context=True,
        enable_user_memories=True,  # üéØ Mem√≥ria autom√°tica habilitada
        markdown=False,
    )
    
    return agente

def criar_aplicacao_agno():
    """
    Cria a aplica√ß√£o usando AgentOS - endpoints autom√°ticos!
    """
    # Criar os agentes individuais
    agente_triagem = criar_agente_triagem()
    agente_especialista = criar_agente_especialista()

    team_instructions = [
        # Linguagem e tom
        "Always respond in Brazilian Portuguese with an empathetic, concise tone.",
        
        # Objetivo do l√≠der
        "Coordinate TRIAGEM and ESPECIALISTA to help users negotiate debts. Maintain a single up-to-date case snapshot across the session.",
        
        # Mem√≥ria & Estado
        "Before delegating, read the session memory/history and extract any debt details already provided by the user.",
        "Update a CASE_SNAPSHOT object (in memory/state) by merging new info with what is already known. Never discard valid fields.",
        
        # Campos do snapshot
        "CASE_SNAPSHOT must include (when known): num_dividas, credores[], valores_aprox[], tipo(s) de d√≠vida, inadimplencia (meses e/ou desde_texto), negociacao_previa, aceita_negativacao, observacoes.",
        
        # Roteamento
        "On greeting or unstructured input, delegate to TRIAGEM to start/continue collection.",
        "If required fields are still missing, delegate to TRIAGEM and ask ONLY for the missing fields.",
        "Once all required fields are present, delegate to ESPECIALISTA for analysis and negotiation draft.",
        
        # Delega√ß√£o com contexto (IMPORTANTE)
        "When delegating to TRIAGEM, pass along a structured payload with the current CASE_SNAPSHOT and a computed MISSING_FIELDS list.",
        "The TRIAGEM must continue from the CASE_SNAPSHOT, not restart. Ask only about MISSING_FIELDS.",

        # Prote√ß√£o contra mudan√ßa de t√≥pico
        "If the user asks about something unrelated to debt negotiation, politely inform them that you are specialized in debt negotiation and ask them to focus on the topic.",
        "If the user tries to change the topic, politely inform them that you are specialized in debt negotiation and ask them to focus on the topic.",
        "If the user tries to joke or make a joke, politely inform them that you are specialized in debt negotiation and ask them to focus on the topic.",
        
        # Formato do payload de delega√ß√£o
        "Delegation payload format for TRIAGEM:",
        "{",
        "  \"member_id\": \"TRIAGEM\",",
        "  \"task_description\": \"Continuar coleta de dados de d√≠vida com base no snapshot.\",",
        "  \"input\": {",
        "    \"case_snapshot\": { /* campos j√° conhecidos, ex.: credores, valores, tempo */ },",
        "    \"missing_fields\": [ /* itens faltantes */ ]",
        "  },",
        "  \"expected_output\": \"JSON minificado com briefing, case_data atualizado, faltantes e status\"",
        "}",
        
        # Compila√ß√£o de resposta ao usu√°rio
        "Never expose raw JSON to the user. If still collecting, reply with a short greeting + one-liner + a single concise question that covers only the missing fields.",
        "After ESPECIALISTA responds, compile one final answer following expected_output."
        ]

    team_expected_output = """
        Coleta (incompleto):
        - Sauda√ß√£o curta (1 linha)
        - Uma frase dizendo que vamos ajudar na negocia√ß√£o de d√≠vidas
        - Uma pergunta √∫nica que pe√ßa SOMENTE os campos faltantes (sem reiniciar)

        Final (completo):
        1) 3 bullets (situa√ß√£o, direitos potenciais em alto n√≠vel, caminho recomendado)
        2) Passos numerados (canal, prazo, evid√™ncias)
        3) Mensagem pronta para copiar/colar ao credor
        """
    
    team = Team(
        id="reclamai_team",
        name="ReclamAI Team",
        members=[agente_triagem, agente_especialista],
        model=OpenAIChat(id="gpt-4o", api_key=os.getenv("OPENAI_API_KEY")),
        pre_hooks=[PromptInjectionGuardrail(), OpenAIModerationGuardrail(), ToxicityHFGuardrail(), SpamAndLengthGuardrail()],
        db=db,
        enable_user_memories=True,
        add_history_to_context=True,
        num_history_runs=10,
        add_datetime_to_context=True,
        description="Team that helps users negotiate debts by coordinating two agents: TRIAGEM collects case details, and ESPECIALISTA creates the negotiation plan and message.",
        instructions=team_instructions,
        expected_output = team_expected_output
    )
    
    # Criar AgentOS que automaticamente exp√µe os endpoints
    agent_os = AgentOS(
        description="Sistema de Renegocia√ß√£o de D√≠vidas",
        teams=[team]
    )
    
    return agent_os

if __name__ == "__main__":
    # Teste b√°sico - criar a aplica√ß√£o
    print("Criando aplica√ß√£o Agno...")
    app_os = criar_aplicacao_agno()
    print("Aplica√ß√£o criada com sucesso!")
    
    # Obter a app FastAPI
    # app = app_os.get_app()
