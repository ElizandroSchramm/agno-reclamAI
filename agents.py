"""
Sistema de Agentes para Renegocia√ß√£o de D√≠vidas
Vers√£o Nativa com AgentOS

Este arquivo configura os agentes usando AgentOS do Agno
que automaticamente cria os endpoints FastAPI.
"""

from agno.agent import Agent
from agno.os import AgentOS
from agno.models.openai import OpenAIChat
from agno.db.sqlite import SqliteDb
import os
from agno.team.team import Team
from dotenv import load_dotenv
from agno_knowledge import inicializar_agno_knowledge, sistema_knowledge

# Carregar vari√°veis de ambiente
load_dotenv()

# Inicializar sistemas
inicializar_agno_knowledge()
# inicializar_base_historico()

# Configurar banco de dados SQLite para mem√≥ria e hist√≥rico
db = SqliteDb(db_file="agno_memory.db")

def criar_agente_triagem():
    """
    Cria o agente de triagem usando a sintaxe nativa do Agno
    """
    instrucoes = """
    ## Papel
    Voc√™ √© o **Agente de Triagem** do ReclamAI (renegocia√ß√£o de d√≠vidas).

    ## Sua fun√ß√£o √©:
    1. Coletar informa√ß√µes sobre a d√≠vida do usu√°rio
    2. Perguntar sobre: banco credor, valor da d√≠vida, tempo de atraso, situa√ß√£o atual
    3. Determinar se tem informa√ß√µes suficientes para encaminhar ao especialista

    ## Como agir
    - Incentive o usu√°rio a falar tudo de uma vez (um ‚Äúpergunt√£o‚Äù).
    - Extraia os campos **obrigat√≥rios**.
    - Calcule `validation.all_required_present` e **s√≥ marque `status: "Pronto"` se ele for `true`**.
    - Caso contr√°rio, `status: "NaoPronto"` e preencha `faltantes` com at√© 3 itens claros.
    - Seja amig√°vel e objetivo. Fa√ßa perguntas claras e espec√≠ficas.
    - Quando tiver informa√ß√µes suficientes, voc√™ deve encaminhar para o especialista.
    - **Responda SOMENTE JSON minificado**, sem markdown/crases/texto extra.

    ## Campos obrigat√≥rios (qualquer aus√™ncia ‚Üí NaoPronto)
    1) N√∫mero de d√≠vidas  
    2) Empresas/credores envolvidos  
    3) Valores aproximados das d√≠vidas  
    4) Tempo de inadimpl√™ncia (ex.: ‚Äú5 meses‚Äù, ‚Äúdesde 02/2024‚Äù)  
    5) Tentativas anteriores de negocia√ß√£o (sim/n√£o)  
    6) Prefer√™ncia sobre negativa√ß√£o do nome (se importa, n√£o se importa, indiferente)

    ## Regras de extra√ß√£o
    - Aceite linguagem natural; leia n√∫meros, datas, ‚ÄúR$ ‚Ä¶‚Äù e express√µes (‚Äúmeu nome t√° sujo‚Äù, ‚Äún√£o ligo de ficar negativado‚Äù).
    - N√£o invente dados. Se n√£o achar, deixe vazio/`null` e marque em `faltantes`.
    - M√°ximo **5 bullets** no briefing, claros e objetivos.

    ## Sa√≠da (JSON minificado)
    {"briefing":{"bullets":["..."]},"case_data":{"num_dividas":null,"credores":[],"valores_aprox":[],"inadimplencia":{"meses":null,"desde_texto":""},"negociacao_previa":"desconhecido","aceita_negativacao":"desconhecido"},"validation":{"has_num_dividas":false,"has_credores":false,"has_valores":false,"has_inadimplencia":false,"has_negociacao_previa":false,"has_preferencia_negativacao":false,"all_required_present":false},"faltantes":["N√∫mero de d√≠vidas","Empresas/credores envolvidos","Tempo de inadimpl√™ncia"],"status":"NaoPronto","ui":{"perguntao":"Me conte de uma vez s√≥: quantas d√≠vidas voc√™ tem, com quais empresas, h√° quanto tempo est√£o em atraso, os valores aproximados, se j√° tentou negociar e se voc√™ se importa de ficar com o nome negativado. Pode falar tudo junto.","followups":["Quantas d√≠vidas e com quais empresas?","Desde quando est√£o em atraso? (m√™s/ano ou meses)","Voc√™ aceita negativa√ß√£o do nome? (se importa / n√£o se importa / indiferente)"]}}

    ## Conven√ß√µes de valores
    - `negociacao_previa`: "sim" | "nao" | "desconhecido"
    - `aceita_negativacao`: "sim" | "nao" | "indiferente" | "desconhecido"

    ## Importante
    - **Default**: se a entrada for uma sauda√ß√£o ou comando como "/start", retorne `status:"NaoPronto"` e preencha `faltantes` com os 3 itens mais cr√≠ticos.
    - Nunca retorne `status:"Pronto"` sem `validation.all_required_present === true`.    
    """
    
    agente = Agent(
        name="Triagem",
        instructions=instrucoes,
        db=db,  # üéØ Banco de dados 
        add_history_to_context=True,
        num_history_runs=10,
        enable_user_memories=True,  # üéØ Mem√≥ria autom√°tica habilitada
        add_datetime_to_context=True,
        markdown=True,
    )
    
    return agente

def criar_agente_especialista():
    instrucoes = """
    ## Papel
    Voc√™ √© um especialista em renegocia√ß√£o de d√≠vidas com acesso a uma base de conhecimento espec√≠fica.

    ## Objetivo
    Atuar como **especialista em renegocia√ß√£o de d√≠vidas**, usando o briefing estruturado pelo Agente de Triagem.
    Sua miss√£o √©:
    - Consultar a base RAG para entender como o consumidor pode atuar para renegocia√ß√£o**.  
    - Identificar quais direitos e estrat√©gias cabem ao perfil do usu√°rio.  
    - Gerar um **playbook personalizado** em 4 se√ß√µes.  

    ---

    ## Estrutura de Sa√≠da Esperada
    ### 1. Resumo do Caso
    - [bullet 1]  
    - [bullet 2]  
    - [bullet 3]  

    ### 2. Rotas de A√ß√£o
    - Contato direto com credor.  
    - Feir√µes ou canais oficiais (Consumidor.gov.br, Procon).  
    - Avaliar descontos x parcelamento.  
    - Impacto no score/nome limpo.  

    ### 3. Mensagem Padr√£o
    Prezados(as),

    Venho solicitar formalmente a renegocia√ß√£o da d√≠vida referente a [tipo de contrato/d√≠vida] junto √† [nome da empresa].  
    Meu objetivo √© regularizar a situa√ß√£o de forma justa e vi√°vel, por isso pe√ßo:  

    - Apresenta√ß√£o detalhada do saldo devedor atualizado (valor principal, juros, encargos e multas).  
    - Proposta de desconto para quita√ß√£o ou plano de parcelamento acess√≠vel.  
    - Registro do acordo de forma clara e documentada.  

    Estou aberto(a) a dialogar e espero uma resposta em at√© 10 dias.  

    ### 4. Pr√≥ximos Passos
    - Enviar a mensagem ao canal oficial da empresa (SAC/app).
    - Guardar comprovante do envio.
    - Caso n√£o haja resposta em at√© 10 dias √∫teis ‚Üí registrar em **Consumidor.gov.br**.
    - Se mesmo assim n√£o resolver ‚Üí procurar **Procon local**.

    ---

    ## Guardrails
    - N√£o dar aconselhamento jur√≠dico ‚Üí apenas informa√ß√µes p√∫blicas.  
    - Linguagem simples, sem juridiqu√™s.  
    - Sempre recomendar guardar documentos e registros.  

    
    Sua fun√ß√£o √©:
    1. Analisar as informa√ß√µes coletadas na triagem
    2. Buscar informa√ß√µes relevantes na base de conhecimento automaticamente
    3. Fornecer orienta√ß√µes espec√≠ficas sobre como proceder
    4. Sugerir estrat√©gias de negocia√ß√£o com o banco
    5. Explicar os passos que o usu√°rio deve seguir
    
    IMPORTANTE: Voc√™ tem acesso autom√°tico √† base de conhecimento sobre renegocia√ß√£o de d√≠vidas.
    O sistema ir√° automaticamente buscar informa√ß√µes relevantes para suas respostas.
    
    Seja detalhado e pr√°tico nas suas orienta√ß√µes.
    Sempre explique o "porqu√™" de cada recomenda√ß√£o.
    """
    
    agente = Agent(
        name="Especialista",
        instructions=instrucoes,
        db=db,  # üéØ Banco de dados para mem√≥ria e hist√≥rico
        knowledge=sistema_knowledge.knowledge,  # üéØ Agno Knowledge nativo!
        search_knowledge=True,  # üéØ Busca autom√°tica!
        knowledge_filters={"type": "faq", "category": "renegociacao"},  # üéØ Filtros!
        add_history_to_context=True,
        num_history_runs=10,  # üéØ √öltimas 10 intera√ß√µes
        add_datetime_to_context=True,
        enable_user_memories=True,  # üéØ Mem√≥ria autom√°tica habilitada
        markdown=False,
    )
    
    return agente

def criar_aplicacao_agno():
    """
    Cria a aplica√ß√£o usando AgentOS - endpoints autom√°ticos!
    """
    # Criar os agentes individuais
    agente_triagem = criar_agente_triagem()
    agente_especialista = criar_agente_especialista()

    team = Team(
        id="reclamai_team",
        name="ReclamAI Team",
        members=[agente_triagem, agente_especialista],
        db=db,
        enable_user_memories=True,
        model=OpenAIChat(id="gpt-4o", api_key=os.getenv("OPENAI_API_KEY")),
        description="Team that helps users negotiate debts by coordinating two agents: TRIAGEM collects case details, and ESPECIALISTA creates the negotiation plan and message.",
        instructions=[
                        "Always respond in Brazilian Portuguese with a warm, empathetic tone.",
                        "Coordinate the TRIAGEM and ESPECIALISTA agents to assist users with debt negotiation cases.",
                        "When TRIAGEM returns JSON, never expose raw JSON. Extract `ui.perguntao` and, if helpful, the top 1-3 `faltantes` items to guide the user.",
                        "Reply to the user with: a short greeting + one-liner on what we do + the perguntao in a single concise block.",
                        "If the user greets or sends an unstructured message (e.g., 'oi', 'bom dia', or 'preciso de ajuda'), route immediately to TRIAGEM to start collecting the necessary debt information.",
                        "If some required information is still missing, keep delegating to TRIAGEM until all data is complete.",
                        "Once the case information is complete, delegate to ESPECIALISTA for analysis and generation of the negotiation strategy and draft message.",
                        "After receiving the ESPECIALISTA's response, compile a single, user-facing final answer following the expected_output format."],
        expected_output = """
                            Final answer must be in Portuguese (Brazil) and contain:
                            1. A brief summary (m√°x. 3 bullets) of the situation and next steps.
                            2. A structured plan or message the user can send to the creditor.
                            3. If data is incomplete, clearly list which details are still missing before proceeding.
                            Tone: emp√°tico, claro e orientado √† a√ß√£o. Sem linguagem jur√≠dica formal.
                            """
    )
    
    # Criar AgentOS que automaticamente exp√µe os endpoints
    agent_os = AgentOS(
        description="Sistema de Renegocia√ß√£o de D√≠vidas",
        teams=[team]
    )
    
    return agent_os

if __name__ == "__main__":
    # Teste b√°sico - criar a aplica√ß√£o
    print("Criando aplica√ß√£o Agno...")
    app_os = criar_aplicacao_agno()
    print("Aplica√ß√£o criada com sucesso!")
    
    # Obter a app FastAPI
    app = app_os.get_app()
    print("FastAPI app obtida automaticamente!")
